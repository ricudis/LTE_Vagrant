# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu2004"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10", virtualbox__intnet: "epcnet", name: "epcnet"
  config.vm.network "private_network", ip: "192.168.44.10", virtualbox__intnet: "capturenet", name: "capturenet"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "./", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
	vb.memory = 4096
	vb.cpus = 8
	vb.default_nic_type = "virtio"
	vb.customize ["modifyvm", :id, "--nicpromisc1", "allow-all", "--nicpromisc2", "allow-all"]
  end

  config.vm.provision "file", source: "provision_files/", destination: "/tmp/"

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
	sudo apt update -y
	sudo apt install -y bzip2 radvd mongodb net-tools bridge-utils libsctp-dev python3-setuptools python3-wheel git libgnutls28-dev libgcrypt20-dev libssl-dev libidn11-dev libmongoc-dev libbson-dev libyaml-dev libnghttp2-dev libmicrohttpd-dev libcurl4-gnutls-dev libnghttp2-dev libtins-dev libfftw3-dev libmbedtls-dev libconfig++-dev libczmq-dev jq
	#
	sudo mkdir -p /opt/LTE
	chown vagrant /opt/LTE
	#
	if [ -f /tmp/provision_files/precompiled/lte-epc-precompiled.tar.bz2 ] ; then
		echo "Using precompiled binaries"
		cd /opt/
		tar -xvvpjf /tmp/provision_files/precompiled/lte-epc-precompiled.tar.bz2
	else
		echo "Will compile from scratch"
		sudo snap install cmake --classic
		sudo apt install -y gcc make g++ ninja-build build-essential flex bison meson python3-pip libboost-program-options-dev
		git clone https://github.com/open5gs/open5gs
		cd open5gs
		git checkout v2.3.4
		mkdir -p /opt/LTE/open5gs/
		meson build --prefix=/opt/LTE/open5gs/
		ninja -C build
		cd build
		sudo ninja install
		sudo cp /tmp/provision_files/LTE/scripts/open5gs-dbctl /opt/LTE/open5gs/bin/open5gs-dbctl
		sudo chmod gou+x /opt/LTE/open5gs/bin/open5gs-dbctl
		cd ..
		cd ..
		cd /opt/
		tar -cvvpjf lte-epc-precompiled.tar.bz2 LTE/open5gs
	fi
	sudo cp -arv /tmp/provision_files/LTE/* /opt/LTE/
	sudo sed -i "s|bind_ip = 127.0.0.1|bind_ip = 0.0.0.0|g" /etc/mongodb.conf
	reboot
  SHELL
end